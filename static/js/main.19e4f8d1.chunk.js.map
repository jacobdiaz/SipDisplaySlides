{"version":3,"sources":["Firebase.js","utility.js","SlideContainer.js","App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Utility","query","vars","split","query_string","i","length","pair","key","decodeURIComponent","value","arr","push","windowUrl","window","location","search","substring","this","parse_query_string","module","SlideContainer","props","state","timer","slides","imageUrls","currentImageIndex","fetchFirebaseData","bind","fetchtimer","fetchSlides","setImageUrls","changeImage","getModuleFromUrl","database","ref","once","then","snapshot","exists","val","setState","console","log","orderByChild","arrayOfImages","Object","entries","map","image","document","slide","src","prevState","setTimeout","style","height","width","name","alt","Component","App","className","background","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.19e4f8d1.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/database\";\n\n// Firebase configuration used to setup firebase app\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCdhdVYsMBjF2ZQYK9i97v4xZCqBRhDob4\",\n  authDomain: \"slidecreator-748a5.firebaseapp.com\",\n  databaseURL: \"https://slidecreator-748a5.firebaseio.com\",\n  projectId: \"slidecreator-748a5\",\n  storageBucket: \"slidecreator-748a5.appspot.com\",\n  messagingSenderId: \"500523622209\",\n  appId: \"1:500523622209:web:f19e14cb84530e4904cbc0\",\n  measurementId: \"G-C4JDKZ8Z1B\",\n};\nfirebase.initializeApp(firebaseConfig);\nexport default firebase;\n","class Utility {\n  // Function to get url params\n  parse_query_string(query) {\n    var vars = query.split(\"&\");\n    var query_string = {};\n    for (var i = 0; i < vars.length; i++) {\n      var pair = vars[i].split(\"=\");\n      var key = decodeURIComponent(pair[0]);\n      var value = decodeURIComponent(pair[1]);\n      // If first entry with this name\n      if (typeof query_string[key] === \"undefined\") {\n        query_string[key] = decodeURIComponent(value);\n        // If second entry with this name\n      } else if (typeof query_string[key] === \"string\") {\n        var arr = [query_string[key], decodeURIComponent(value)];\n        query_string[key] = arr;\n        // If third or later entry with this name\n      } else {\n        query_string[key].push(decodeURIComponent(value));\n      }\n    }\n    return query_string;\n  }\n\n  // Function to get url params\n  getModuleFromUrl() {\n    const windowUrl = window.location.search.substring(1);\n    const params = this.parse_query_string(windowUrl);\n    return params.module;\n  }\n}\nexport default Utility;\n","import React, { Component } from 'react';\nimport firebase from './Firebase';\nimport Utility from './utility.js'; // Used fetchFirebaseData to get variables from URL route path\n\nexport default class SlideContainer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      timer: null, // Keeps track of duration of slides\n      slides: {}, // Holds data of all slides in the module (position, imageUrl, module)\n      imageUrls: {}, // Holds Firebase URLs of images\n      currentImageIndex: 0, // Used to iterate through imageUrls\n    };\n\n    this.fetchFirebaseData = this.fetchFirebaseData.bind(this);\n    this.fetchtimer = this.fetchtimer.bind(this);\n    this.fetchSlides = this.fetchSlides.bind(this);\n    this.setImageUrls = this.setImageUrls.bind(this);\n    this.changeImage = this.changeImage.bind(this);\n  }\n\n  //! React Lifecycle method\n  componentDidMount() {\n    this.fetchFirebaseData();\n    // TODO Check we need to update\n    // TODO If we need to update pull data from mySQL and spit it into Firebase\n  }\n\n  fetchFirebaseData() {\n    const util = new Utility();\n    const module = util.getModuleFromUrl();\n    this.fetchtimer(module);\n    this.fetchSlides(module);\n  }\n\n  fetchtimer(module) {\n    const timerRef = firebase // Reference to timer collection\n      .database()\n      .ref(`Modules/Module${module}/Counter/`);\n\n    timerRef.once('value').then((snapshot) => {\n      if (snapshot.exists()) {\n        let timer = snapshot.val()['Counter']; // Snapchot returns an object\n        this.setState({\n          timer: timer,\n        });\n      } else {\n        console.log('Snapshot not found');\n      }\n    });\n  }\n\n  fetchSlides(module) {\n    // Reference our slides\n    const slidesRef = firebase\n      .database()\n      .ref('Modules/Module' + module + '/Slides')\n      .orderByChild('position');\n\n    // Query into firebase and setstate of slides\n    slidesRef.once('value').then((snapshot) => {\n      if (snapshot.exists()) {\n        this.setState({\n          slides: snapshot.val(),\n        });\n        // After we get the slides set urls of images\n        this.setImageUrls();\n        this.changeImage();\n      } else {\n        console.log('Snapshot not found');\n      }\n    });\n  }\n\n  setImageUrls() {\n    var arrayOfImages = [];\n\n    // Loop through all the slide objects in state and push image urls to arrayOfImages\n    Object.entries(this.state.slides).map(([key, value]) => arrayOfImages.push(value.image));\n\n    // Set state of imageUrls\n    this.setState({\n      imageUrls: arrayOfImages,\n    });\n  }\n\n  changeImage() {\n    let { timer, currentImageIndex, imageUrls } = this.state;\n\n    // Set image source to the url from firebase\n    document.slide.src = imageUrls[currentImageIndex];\n\n    // Loop through and reset when you get to the end of the array\n    if (currentImageIndex < imageUrls.length - 1) {\n      this.setState((prevState) => {\n        return { currentImageIndex: prevState.currentImageIndex + 1 };\n      });\n    } else {\n      this.setState({ currentImageIndex: 0 });\n    }\n\n    // Recursively call change image!\n    setTimeout(\n      function () {\n        this.changeImage();\n      }.bind(this),\n      1000 * timer\n    );\n  }\n\n  render() {\n    return (\n      <div style={{ height: '100vh', width: '100%' }}>\n        <img name=\"slide\" height=\"100%\" alt=\"slide\"></img>\n      </div>\n    );\n  }\n}\n","import \"./App.css\";\nimport SlideContainer from \"./SlideContainer\";\nfunction App() {\n  return (\n    <div className=\"App\" style={{ background: \"black\" }}>\n      <SlideContainer />\n    </div>\n  );\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}